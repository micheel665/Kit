{"name":"Kit","tagline":"Shorten your ComputerCraft lua code by using Kit! This library, or rather API, has all the functions you need to make your code shorter, better-looking and faster to make.","body":"![Kit](https://camo.githubusercontent.com/639e1c260360af95291856e4307d76010e8fc25e/687474703a2f2f6173736574732e67696e67657267616d696e672e636f6d2f696d672f6b69742f6c6f676f2e706e67)\r\n\r\nShorten your ComputerCraft lua code by using Kit! This library, or rather API, has all the functions you need to make your code shorter, better-looking and faster to make.\r\n\r\nOpenKit has all the functions you need for programming with OpenPeripherials Addons, wich is a mod for ComputerCraft.\r\n\r\n# Getting Started\r\nDownload and install the latest version of Kit manually [here](https://github.com/AxTo/Kit/releases/latest \"Download Latest\"), or use the Pastebin installs.\r\n- Pastebin install: `pastebin get 8EmNXzQr install-kit`.\r\n- OpenKit pastebin install: `pastebin get eqdNPkkb install-openkit`.\r\n- GuiKit pastebin install: `pastebin get guJxNvsS install-guikit`\r\n\r\n> __Heads Up:__ The current versions of Kit, OpenKit and GuiKit are unstable and can contain typo's, errors and bugs.\r\n\r\n# Documentation\r\n\r\n## Load the API\r\nLoad the library in your file with a single line of code: \r\n```\r\nos.loadAPI(\"kit\")\r\n``` \r\nUse one of the many functions by doing: \r\n```\r\nkit.functionName()\r\n```\r\nThis also applies to OpenKit and GuiKit: \r\n```\r\nos.loadAPI(\"openKit\")\r\nopenKit.functionName()\r\n\r\nos.loadAPI(\"guiKit\")\r\nguiKit.functionName()\r\n```\r\n\r\n## Kit Functions\r\nBelow is a list of all functions in the Kit, OpenKit  and GuiKit libraries. Click the function names for their documentation.\r\n> __Heads Up:__ Un-clickable functions in the table of contents don't have any documentation yet.\r\n\r\n\r\n### Table of Contents\r\n\r\n| [Kit Functions](https://github.com/AxTo/Kit/blob/master/README.md#kit-functions) | Description | \r\n|-------| --- | --- |\r\n| [version()](https://github.com/AxTo/Kit/blob/master/README.md#version)| Get version of your Kit installation.\r\n| [isAdvanced()](https://github.com/AxTo/Kit/blob/master/README.md#isadvanced)| Check if PC is advanced.\r\n| [wrapSides()](https://github.com/AxTo/Kit/blob/master/README.md#wrapsides)| Wrap all attatched peripherals.\r\n| [load()](https://github.com/AxTo/Kit/blob/master/README.md#loadpath-isurl)| Load a file or web URL.\r\n| [save()](https://github.com/AxTo/Kit/blob/master/README.md#savedata-path-method)| Save data to a file.\r\n| [explode()](https://github.com/AxTo/Kit/blob/master/README.md#explodeseperator-string)| Explode a string by seperator.\r\n| [keyPress()](https://github.com/AxTo/Kit/blob/master/README.md#keypresskey-exitonfalse)| Detect a key press.\r\n| [random()](https://github.com/AxTo/Kit/blob/master/README.md#randomlength-digits-upper-lower)| Random string generator.\r\n| [dump()](https://github.com/AxTo/Kit/blob/master/README.md#dumptable)| Dump the contents of a table.\r\n| [scanAPI()](https://github.com/AxTo/Kit/blob/master/README.md#scanapiapi) | Scan an API for its functions.\r\n| [help()](https://github.com/AxTo/Kit/blob/master/README.md#help) | Get help info for Kit.\r\n| [clear()](https://github.com/AxTo/Kit/blob/master/README.md#clearscreen-pos1-pos2) | Clear a screen and set cursor position.\r\n| [open()](https://github.com/AxTo/Kit#openside-range) | Open modem channels.\r\n| [close()](https://github.com/AxTo/Kit#closeside-range) | Close modem channels.\r\n| [receive()](https://github.com/AxTo/Kit#receivetimeout) | Listen for modem messages on open channels.\r\n__[OpenKit Functions](https://github.com/AxTo/Kit/blob/master/README.md#openkit-functions)__ | __Description__\r\n[getPosition()](https://github.com/AxTo/Kit/blob/master/README.md#getpositionplayer-side)| Get current position of a player relative to the sensor.\r\n|checkPosition() |\r\n__GuiKit Functions__ | __Description__\r\n|drawRectangle() |\r\n| button()\r\n\r\n----------\r\n\r\n### version()\r\n\r\n| cc  x.x > | Returns current Kit version.|\r\n| --------- | ------------------------------------------ |\r\n|Responses: | Data response.\t\t\t\t\t         |\r\n|Parameters:| None.\t\t\t\t\t\t\t\t\t\t |\r\n|Example:   | `print( kit.version() )`\t\t     \t\t |\r\n|Result:    | The version of your installed Kit copy (eg: `1.1.0`).  |\r\n\r\n----------\r\n\r\n### isAdvanced()\r\n\r\n| cc  1.45 > | Checks if computer is an advanced computer.|\r\n| --------- | ------------------------------------------ |\r\n|Responses: | Boolean (true or false).\t\t\t\t\t |\r\n|Parameters:| None.\t\t\t\t\t\t\t\t\t\t |\r\n|Example:   | `print( kit.isAdvanced() )`\t\t\t\t |\r\n|Result:    | `true` or `false`\t\t\t\t\t\t\t |\r\n\r\n----------\r\n\r\n### wrapSides()\r\n\r\n|  cc 1.5.1 >  | Checks all sides for peripherals and wraps them. |\r\n|------------|--------------------------------------------------|\r\n|Responses:  | Number of wrapped peripherals. *returns false if an error occurs.*|\r\n|Parameters: | None. \t\t\t\t\t\t\t\t\t\t\t|\r\n|Example:    | `result = kit.wrapSides() print(result)`\t\t\t|\r\n|Result:     | If we've got a printer and a monitor: `2`\t\t|\r\n> __Heads Up:__ The result in numbers, is actually a string, do `tonumber(result)` to convert it to raw numbers again.\r\n\r\n----------\r\n\r\n### load(path, isurl)\r\n\r\n|  cc 1.4 >  | Load a file or webpage. |\r\n|------------|--------------------------------------------------|\r\n|Responses:  | Fetched data response. *returns false if an error occurs.* |\r\n|Parameters: | _path_: the path to the file including the file name (required). |\r\n|            | _isurl_: Use `true` if _path_ is an URL (optional). |\r\n|Example:    | `result = kit.load(\"hello.txt\") print(result)`|\r\n|Result:\t | Contents of `hello.txt`.\t\t\t\t\t\t\t\t\t|\r\n\r\n----------\r\n\r\n### save(data, path, method)\r\n\r\n|  cc 1.0 >  | Save data to a file. |\r\n|------------|--------------------------------------------------|\r\n|Responses:  | Boolean (true or false). |\r\n|Parameters: | _data_: the text/code/table you want to save (required). |\r\n|            | _path_: the path to the file including the filename (required).|\r\n|            | _method_: `w` to open it for writing and remove any existing data on file open. Or `a` to open for writing but keep existing data and append any writes to the end of the file.\r\n|Example:    | `result = kit.save(\"Hello World!\", \"hello.txt\", \"a\") print(result)` |\r\n|Result:\t | `true` if the operation succeeded, or `false` if something went wrong. |\r\n\r\n----------\r\n\r\n### explode(seperator, string)\r\n\r\n|  cc 1.0 >  | Explode a string by seperator. |\r\n|------------|--------------------------------------------------|\r\n|Responses:  | Table response. *returns false if an error occurs.* |\r\n|Parameters: | _seperator_: explode at the given character (required). |\r\n|            | _string_: data to explode (required). |\r\n|Example:    | `result = kit.explode(\"#\", \"one#two#three#four\")` |\r\n|Result:\t | Table: `result{ [1]=>\"one\", [2]=>\"two\", [3]=>\"three\", [4]=>\"four\" }` |\r\n\r\n----------\r\n\r\n### keyPress(key, exitonfalse)\r\n\r\n|  cc 1.0 >  | Wait for a keypress. |\r\n|------------|--------------------------------------------------|\r\n|Responses:  | Boolean (true or false) |\r\n|Parameters: | _key_: the keypress we should wait for (optional). |\r\n|            | _exitonfalse_: should the function return false if a keypress is not `key`? (optional). |\r\n|Example 1:  | `result = kit.keyPress(\"Q\") print(result)` |\r\n|Result:\t | If the key Q is pressed: `true`, if not the function will keep waiting. |\r\n|Example 2:  | `result = kit.keyPress(\"X\", true) print(result)` |\r\n|Result:     | If the key X is pressed: `true`, if not: `false`.|\r\n> __Heads Up:__ for a list of keyboard keys (including Enter, Space, etc) see [the CC wiki](http://computercraft.info/wiki/File:CC-Keyboard-Charcodes.png \"Go to the ComputerCraft wiki\"), or if the wiki is being DDOS'ed again [this image](http://i.imgur.com/iFRtlWL.png).\r\n\r\n----------\r\n\r\n### random(length, digits, upper, lower)\r\n\r\n|  cc 1.1 >  | Generate a random hash |\r\n|------------|--------------------------------------------------|\r\n|Responses:  | Data response *returns false if an error occurs.* |\r\n|Parameters: | _length_: the length of the random hash (required) (max. is 20). |\r\n|            | _digits_: use digits? (boolean) (optional). |\r\n|            | _upper_: use uppercase letters? (boolean) (optional). |\r\n|            | _lower_: use lowercase letters? (boolean) (optional). |\r\n|Example 1:  | `result = kit.random(10, true) print(result)` |\r\n|Result:\t | Example: `7381839149` |\r\n|Example 2:  | `result = kit.random(12, true, true, true) print(result)` |\r\n|Result:     | Example: `D9NqLaN1hkkHEU` |\r\n> __Heads Up:__ the random function uses the HTTP API, make sure to enable it in your CC Config.\r\n\r\n----------\r\n\r\n### dump(table)\r\n\r\n|  cc 1.0 >  | Dump a table. |\r\n|------------|--------------------------------------------------|\r\n|Responses:  | Data response *returns false if an error occurs.* |\r\n|Parameters: | _table_: the table to dump (required). |\r\n|Example 1:  | `result = kit.dump(myTable) print(result)` |\r\n|Result:     | Example: `[1]: \"one\", [2]: \"two\", [3]: \"three\",` |\r\n> __Heads Up:__ this function is mainly used for debugging purposes, to unserialize a table, use `textutils.serialize(myTable)`.\r\n\r\n----------\r\n\r\n### scanAPI(api)\r\n\r\n|  cc 1.0 >  | Output all functions of given API. |\r\n|------------|--------------------------------------------------|\r\n|Responses:  | Table response *returns false if an error occurs.* |\r\n|Parameters: | _api_: the library/api to scan (required). |\r\n|Example:  | `result = kit.scanAPI(myAPI) print( kit.dump(result) )` |\r\n|Result:     | Example: `[1]: \"myFunction\", [2]: \"secondFunction\", [3]: \"anotherFunction\",` |\r\n\r\n----------\r\n\r\n### help()\r\n| cc 1.0 > | Outputs functions of Kit and a link to the docs.|\r\n|-----|-----|\r\n| Responses: | Data response.|\r\n| Parameters: | none|\r\nExample 1: | `print( kit.help() )`|\r\nResult: | Welcome to Kit! Visit http://git.io/kitdocs for the documentation. Here's a list of all the functions you can use: ...|\r\n\r\n\r\n----------\r\n\r\n### clear(screen, pos1, pos2)\r\n| cc x.x > | Clears your screen and sets cursor position.\r\n|----|----|\r\n|Responses: | Boolean (true or false)|\r\n| Parameters: | _screen_: the screen you want to clear (required).|\r\n| | _pos1_ and _pos2_: x and y values of where you want the pointer to be after the screen has been reset (optional).|\r\n|Example 1:| `kit.clear(term)`|\r\n|Result 1: | The terminal screen gets reset and the pointer to x=1 and y=1.\r\n|Example 2:| (Assuming that there's a monitor wrapped to `monitor`) `kit.clear(monitor, 1, 5)`|\r\n|Result 2:| The monitor screen gets reset and the pointer to x=1 and y=5.|\r\n> __Heads Up:__ You can't use quotes in the clear function: So `kit.clear(\"term\")` is wrong, but `kit.clear(term)` is correct.\r\n\r\n----------\r\n\r\n### open(side, range)\r\n| cc x.x > | Opens given modem channels. |\r\n| --- | --- |\r\n|Responses: | Boolean (true or false) |\r\n|Parameters: | _side_: the side where your modem is attached.|\r\n| | _range_: the range of channels you want to open, separated by a `-`.|\r\n|Example 1: | `kit.open(\"back\", \"1-10\")` |\r\n|Result 1: | The channels 1 to 10 have been opened.|\r\n|Example 2: | `kit.open(\"top\", \"40\")` or `kit.open(\"top\", 40)` |\r\n| Result 2: | The channel 40 has been opened. |\r\n> __Heads Up:__ The maximum open channels allowed is 128 per computer. When trying to open more, your program will throw an error.\r\n\r\n----------\r\n\r\n### close(side, range)\r\n\r\nExactly the same as above; `kit.open(side, range)`. Difference is that `kit.close()` (obviously) closes channels instead of opening them.\r\n\r\n----------\r\n\r\n### receive(timeout)\r\n| cc x.x > | Listen to opened ports for modem messages. |\r\n| --- | --- |\r\n| Responses: | Table data or boolean false if timed out. |\r\n| Parameters: | _timeout_: in seconds, how long we should wait for a message until exiting the function (optional). _If not defined, the function will wait forever._\r\n| Example 1: | `result = kit.receive() print( kit.dump(result) )`\r\n| Result 1: | Example, If a message was intercepted on the opened channels: `{ message = \"Hello World!\", modem = \"back\", channel = 40, distance = 2.714829, replyChannel = 666, }`\r\n| Example 2: | `result = kit.receive(5)`|\r\n| Result 2: | If no message was intercepted after 5 seconds: `false`, else see result 1.\r\n----------\r\n\r\n## OpenKit Functions\r\n\r\n### getPosition(player, side) / getPos()\r\n\r\n|  openP 0.x >  | Gets current position of given player relative to the sensor. |\r\n|------------|--------------------------------------------------|\r\n|Responses:  | Table response. *returns false if an error occurs.* |\r\n|Parameters: | _player_: the username of the player you want it's current position from (required). |\r\n|            | _side_: the side of the PC where your sensor is located (required). |\r\n|Example:    | `result = openKit.getPosition(\"alex\", \"right\")` |\r\n|Result:\t | Table: `result{ [\"x\"]=>\"3\", [\"y\"]=>\"0\", [\"z\"]=>\"2\" }` |\r\n> __Heads Up:__ Make sure that the specified player is within the range of the sensor.\r\n\r\n----------\r\n\r\n### checkPosition() / checkPos()\r\n\r\n----------\r\n\r\n## GuiKit Functions\r\n\r\n### drawRectangle()\r\n\r\n----------\r\n\r\n### button()\r\n\r\n----------\r\n\r\n*Have any questions/suggestions about the documentation, or do you have a function that __needs__ to be in Kit? Just [open an Issue](https://github.com/AxTo/Kit/issues/new \"Open Issue Now\"), or [do a Pull Request](https://github.com/AxTo/Kit/compare/ \"Do a Pull Request Now\").*\r\n\r\n----------\r\n\r\n# Copyright & License\r\nCode and documentation copyright 2014 AxTo Inc. Code released under [the MIT license](https://github.com/AxTo/Kit/blob/master/LICENSE \"The MIT License.\").\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}